# coding:utf-8
"""
Django settings for pywe_django project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '0&l(tg5e_=0$(_2whq5gqc5!a*of-vtphx2_13xiq)q#fmk1%w'

# SECURITY WARNING: don't run with debug turned on in production!
DJANGO_IN_DOCKER_DEBUG = os.environ.get("DJANGO_DEBUG", None)

DEBUG = True if DJANGO_IN_DOCKER_DEBUG is None else False

PAGE_LIMIT = 20
ALLOWED_HOSTS = ['*']

# import wego
# 
# def upsert_user(wx_user):
# 
#     from app.models import WxUser
#     if WxUser.objects.filter(openid=wx_user.openid).first():
#         WxUser.objects.filter(openid=wx_user.openid).update(**wx_user.data)
#     else:
#         WxUser.objects.create(**wx_user.data)
# 
# 
# # 给每个使用了 w.login_required 装饰器的 request 添加 u 属性，为数据库查询出来的 WxUser
# def request_hook(request):
# 
#     from app.models import WxUser
#     request.u = WxUser.objects.filter(openid=request.wx_user.openid).first()
# 
# 
# wego 初始化, 对应信息可以登录微信公众平台获取
# w = wego.init(
#     # 应用ID (开发 -> 基本配置)
#     APP_ID='',
#     # 应用密钥 (开发 -> 基本配置)
#     APP_SECRET='',
#     # 注册域名, 微信公众平台左侧: 接口权限-> 网页授权获取用户基本信息内配置, 需加上 http(s):// 以 / 结尾
#     REGISTER_URL='http://www.example.com/',
#     # WEGO 助手 'wego.helpers.tornado_helper'
#     HELPER='wego.helpers.official.DjangoHelper',
#     # 更新或插入用户信息到数据库
#     UPSERT_USER=upsert_user,
#     # DEBUG 模式
#     DEBUG=True,
#     # 定制 u (数据库内的 WxUser)
#     REQUEST_HOOK=request_hook
# )


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_filters',
    'app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pywe_django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': [
            os.path.join(BASE_DIR, 'app/templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {'environment': 'pywe_django.jinja2.environment'}
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pywe_django.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'xianggui_service',
        'USER': 'root',
        'PASSWORD': 'qwer1234' if DJANGO_IN_DOCKER_DEBUG is None else 'gtndyq',
        'HOST': '127.0.0.1' if DJANGO_IN_DOCKER_DEBUG is None else 'db',
        'PORT': '',
        'OPTIONS': {'charset': 'utf8mb4'}
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://qwer1234@%s:6379/1" % ("127.0.0.1" if DJANGO_IN_DOCKER_DEBUG is None else "redis://redis:6379"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
        "TIMEOUT": 60 * 5,
        "MAX_ENTRIES": 10000,
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static/") if DJANGO_IN_DOCKER_DEBUG is not None else "",
]

STATIC_URL = '/static/'

STATIC_ROOT = '/xianggui_service_share/static' if DJANGO_IN_DOCKER_DEBUG is not None else 'static/'

MEDIA_URL = '/media/'

MEDIA_ROOT = '/xianggui_service_share/media/' if DJANGO_IN_DOCKER_DEBUG is not None else "media/"

BASE_URL = '' if DJANGO_IN_DOCKER_DEBUG is not None else ""

# REST_FRAMEWORK
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        # 'restframework_core.authentications.DjangoObjectPermissionsOrAnonReadOnly',
        'restframework_core.authentications.CustomPermission',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'restframework_core.authentications.CustomAuthentication',
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'EXCEPTION_HANDLER': 'restframework_core.exceptions.custom_exception_handler',
    'DATETIME_FORMAT': '%Y-%m-%d',
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'DEFAULT_PAGINATION_CLASS': 'restframework_core.paginations.PageSet',
}

JWT_AUTH = {
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'restframework_core.response.jwt_response_payload_handler',
}

# 日志目录
"""
if DJANGO_IN_DOCKER_DEBUG:
    if not os.path.exists("/var/xianggui_service/logs"):
        os.makedirs("/var/xianggui_service/logs")
    LOGGING_FILE_NAME = "/var/xianggui_service/logs/api_error.log"
else:
    if not os.path.exists("logs"):
        os.makedirs("logs")
    LOGGING_FILE_NAME = "logs/error.log"



LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '[%(levelname)s][%(asctime)s]%(message)s'
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGGING_FILE_NAME,
            'maxBytes': 1024 * 1024 * 10,
            'backupCount': 5,
            'encoding': 'utf-8',
            'formatter': 'simple'
        }
    },
    'loggers': {
        # 'django': {
        #     'handlers': ['console'],
        #     'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
        # },
        'api': {
            'handlers': ['error'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
        },
        'django.template': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
"""
